;エネミー基準
+class Learn()
	
	const basenum: int :: 8
	+var sigma: float
	
	+var base_ex: []list<@Base>
	+var base_ey: []list<@Base>
	+var base_px: []list<@Base>
	+var base_py: []list<@Base>
	+var base_bpx: []list<@Base>
	+var base_bpy: []list<@Base>
	+var base_bex: []list<@Base>
	+var base_bey: []list<@Base>
	
	
	*func ctor()
		
		do me.sigma :: 30.0
		
		do me.base_ex :: #[basenum ^ 2]list<@Base>
		do me.base_ey :: #[basenum ^ 2]list<@Base>
		do me.base_px :: #[basenum ^ 2]list<@Base>
		do me.base_py :: #[basenum ^ 2]list<@Base>
		do me.base_bex :: #[basenum ^ 2]list<@Base>
		do me.base_bey :: #[basenum ^ 2]list<@Base>
		do me.base_bpx :: #[basenum ^ 2]list<@Base>
		do me.base_bpy :: #[basenum ^ 2]list<@Base>
		
		for i(0, basenum ^ 2 - 1)
			do me.base_ex[i] :: #list<@Base>
			do me.base_ey[i] :: #list<@Base>
			do me.base_px[i] :: #list<@Base>
			do me.base_py[i] :: #list<@Base>
			do me.base_bex[i] :: #list<@Base>
			do me.base_bey[i] :: #list<@Base>
			do me.base_bpx[i] :: #list<@Base>
			do me.base_bpy[i] :: #list<@Base>
		end for
		
		
		for i(0, basenum ^ 2 - 1)
			for(1, basenum)
				var base: @Base :: #@Base
				do me.base_ex[i].add(base)
				do me.base_ey[i].add(base)
				do me.base_px[i].add(base)
				do me.base_py[i].add(base)
				do me.base_bex[i].add(base)
				do me.base_bey[i].add(base)
				do me.base_bpx[i].add(base)
				do me.base_bpy[i].add(base)
			end for
		end for
		
	end func
	
	+func learn(e: \agent@Agent, p: \agent@Agent, be: list<\bullet@Bullet>, bp: list<\bullet@Bullet>): []int
		var shoot: int
		var move: int
		;now
		var bex: float :: -999.9
		var bey: float :: -999.9
		var bpx: float :: -999.9
		var bpy: float :: -999.9
		var bpm: int
		var bem: int
		if(^be <> 0)
			do be.head()
			do bem :: be.get().flag
			do bex :: be.get().x + be.get().width / 2.0
			do bey :: be.get().y + be.get().height / 2.0
		end if
		if(^bp <> 0)
			do bp.head()
			do bpm :: bp.get().flag
			do bpx :: bp.get().x + bp.get().width / 2.0
			do bpy :: bp.get().y + bp.get().height / 2.0
		end if
		;next
		var _bpm: int
		var _bem: int
		var _pxy: []float :: me.next_pos(p.moveF, p.x + p.width / 2.0, p.y + p.height / 2.0)
		var _bexy: []float
		
		if(^bp <> 0)
			do bp.head()
			do _bpm :: bpm
		else
			do _bpm :: 8
		end if
		var _bpxy: []float :: me.next_pos(_bpm, bpx, bpy)
		
		;next
		var q_max: float :: 0.0
		for move_next(0, 8)
			var _exy: []float :: me.next_pos(move_next, e.x + e.width / 2.0, e.y + e.height / 2.0)
			
			var _e_dp: int :: me.discrete_pos(_exy[0], _exy[1])
			
			for shoot_next(0, 1)
				var q_next: [][]float :: #[9, 2]float
				if(bem = 8 & move_next <> 8)
					do _bem :: move_next * shoot_next + 8 * (1 - shoot_next)
				elif(bem <> 8)
					do _bem :: bem
				else
					do _bem :: 8
				end if
				do _bexy :: me.next_pos(_bem, bex, bey)
				
				
				;Qmaxをもとめる
				var lcount: int :: 0
				do me.base_ex[_e_dp].head()
				do me.base_ey[_e_dp].head()
				do me.base_px[_e_dp].head()
				do me.base_py[_e_dp].head()
				do me.base_bex[_e_dp].head()
				do me.base_bey[_e_dp].head()
				do me.base_bpx[_e_dp].head()
				do me.base_bpy[_e_dp].head()
				while(!me.base_ex[_e_dp].term())
					var base: @Base
					var theta: float
					var f: float
					;ex
					do base :: me.base_ex[_e_dp].get()
					do theta :: base.theta
					do f :: me.basefunc(_exy[0], \main@WIDTH $ float / (basenum $ float - 1.0) * lcount $ float, me.sigma * 2.0)
					do q_next[move_next][shoot_next] :+ theta * f
					if(base.q_max < f * theta | (move_next = 0 & shoot_next = 0))
						do base.q_max :: f * theta
					end if
					;ey
					do base :: me.base_ey[_e_dp].get()
					do theta :: base.theta
					do f :: me.basefunc(_exy[1], \main@HEIGHT $ float / (basenum $ float - 1.0) * lcount $ float, me.sigma)
					do q_next[move_next][shoot_next] :+ theta * f
					if(base.q_max < f * theta | (move_next = 0 & shoot_next = 0))
						do base.q_max :: f * theta
					end if
					;px
					do base :: me.base_px[_e_dp].get()
					do theta :: base.theta
					do f :: me.basefunc(_pxy[0], \main@WIDTH $ float / (basenum $ float - 1.0) * lcount $ float, me.sigma * 2.0)
					do q_next[move_next][shoot_next] :+ theta * f
					if(base.q_max < f * theta | (move_next = 0 & shoot_next = 0))
						do base.q_max :: f * theta
					end if
					;py
					do base :: me.base_py[_e_dp].get()
					do theta :: base.theta
					do f :: me.basefunc(_pxy[1], \main@HEIGHT $ float / (basenum $ float - 1.0) * lcount $ float, me.sigma)
					do q_next[move_next][shoot_next] :+ theta * f
					if(base.q_max < f * theta | (move_next = 0 & shoot_next = 0))
						do base.q_max :: f * theta
					end if
					;bex
					do base :: me.base_bex[_e_dp].get()
					do theta :: base.theta
					do f :: me.basefunc(_bexy[0], \main@WIDTH $ float / (basenum $ float - 1.0) * lcount $ float, me.sigma * 2.0)
					do q_next[move_next][shoot_next] :+ theta * f
					if(base.q_max < f * theta | (move_next = 0 & shoot_next = 0))
						do base.q_max :: f * theta
					end if
					;bey
					do base :: me.base_bey[_e_dp].get()
					do theta :: base.theta
					do f :: me.basefunc(_bexy[1], \main@HEIGHT $ float / (basenum $ float - 1.0) * lcount $ float, me.sigma)
					do q_next[move_next][shoot_next] :+ theta * f
					if(base.q_max < f * theta | (move_next = 0 & shoot_next = 0))
						do base.q_max :: f * theta
					end if
					;bpx
					do base :: me.base_bpx[_e_dp].get()
					do theta :: base.theta
					do f :: me.basefunc(_bpxy[0], \main@WIDTH $ float / (basenum $ float - 1.0) * lcount $ float, me.sigma * 2.0)
					do q_next[move_next][shoot_next] :+ theta * f
					if(base.q_max < f * theta | (move_next = 0 & shoot_next = 0))
						do base.q_max :: f * theta
					end if
					;bpy
					do base :: me.base_bpy[_e_dp].get()
					do theta :: base.theta
					do f :: me.basefunc(_bpxy[1], \main@HEIGHT $ float / (basenum $ float - 1.0) * lcount $ float, me.sigma)
					do q_next[move_next][shoot_next] :+ theta * f
					if(base.q_max < f * theta | (move_next = 0 & shoot_next = 0))
						do base.q_max :: f * theta
					end if
					
					
					do lcount :+ 1
					do me.base_ex[_e_dp].next()
					do me.base_ey[_e_dp].next()
					do me.base_px[_e_dp].next()
					do me.base_py[_e_dp].next()
					do me.base_bex[_e_dp].next()
					do me.base_bey[_e_dp].next()
					do me.base_bpx[_e_dp].next()
					do me.base_bpy[_e_dp].next()
				end while
				
				if(q_max < q_next[move_next][shoot_next] | (move_next = 0 & shoot_next = 0))
					do q_max :: q_next[move_next][shoot_next]
					;行動選択
					do move :: move_next
					do shoot :: shoot_next
				end if
			end for
		end for
		
		;now
		var r: float :: me.get_reward(e, p, bex, bey, bpx, bpy)
		
		var e_dp: int :: me.discrete_pos(e.x + e.width / 2.0, e.y + e.height / 2.0)
		
		var q: float
		var lcount: int :: 0
		do me.base_ex[e_dp].head()
		do me.base_ey[e_dp].head()
		do me.base_px[e_dp].head()
		do me.base_py[e_dp].head()
		do me.base_bex[e_dp].head()
		do me.base_bey[e_dp].head()
		do me.base_bpx[e_dp].head()
		do me.base_bpy[e_dp].head()
		while(!me.base_ex[e_dp].term())
			var base: @Base
			;ex
			do base :: me.base_ex[e_dp].get()
			do base.f :: me.basefunc(e.x + e.width / 2.0, \main@WIDTH $ float / (basenum $ float - 1.0) * lcount $ float, me.sigma * 2.0)
			do q :: base.f * base.theta
			do base.theta :: me.update_theta(base.theta, 0.2, 0.8, base.q_max, q, r, base.f)
			if(lcount = 0 | lcount = basenum - 1)
				;端にいるのを防ぐ
				do base.theta :: me.update_theta(base.theta, 0.2, 0.8, base.q_max, q, r - 10.0, base.f)
			end if
			;ey
			do base :: me.base_ey[e_dp].get()
			do base.f :: me.basefunc(e.y + e.height / 2.0, \main@HEIGHT $ float / (basenum $ float - 1.0) * lcount $ float, me.sigma)
			do q :: base.f * base.theta
			do base.theta :: me.update_theta(base.theta, 0.2, 0.8, base.q_max, q, r, base.f)
			if(lcount = 0 | lcount = basenum - 1)
				do base.theta :: me.update_theta(base.theta, 0.2, 0.8, base.q_max, q, r - 10.0, base.f)
			end if
			;px
			do base :: me.base_px[e_dp].get()
			do base.f :: me.basefunc(p.x + p.width / 2.0, \main@WIDTH $ float / (basenum $ float - 1.0) * lcount $ float, me.sigma * 2.0)
			do q :: base.f * base.theta
			do base.theta :: me.update_theta(base.theta, 0.2, 0.8, base.q_max, q, r, base.f)
			;py
			do base :: me.base_py[e_dp].get()
			do base.f :: me.basefunc(p.y + p.height / 2.0, \main@HEIGHT $ float / (basenum $ float - 1.0) * lcount $ float, me.sigma)
			do q :: base.f * base.theta
			do base.theta :: me.update_theta(base.theta, 0.2, 0.8, base.q_max, q, r, base.f)
			;bex
			do base :: me.base_bex[e_dp].get()
			do base.f :: me.basefunc(bex, \main@WIDTH $ float / (basenum $ float - 1.0) * lcount $ float, me.sigma * 2.0)
			do q :: base.f * base.theta
			do base.theta :: me.update_theta(base.theta, 0.2, 0.8, base.q_max, q, r, base.f)
			;bey
			do base :: me.base_bey[e_dp].get()
			do base.f :: me.basefunc(bey, \main@HEIGHT $ float / (basenum $ float - 1.0) * lcount $ float, me.sigma)
			do q :: base.f * base.theta
			do base.theta :: me.update_theta(base.theta, 0.2, 0.8, base.q_max, q, r, base.f)
			;bpx
			do base :: me.base_bpx[e_dp].get()
			do base.f :: me.basefunc(bpx, \main@WIDTH $ float / (basenum $ float - 1.0) * lcount $ float, me.sigma * 2.0)
			do q :: base.f * base.theta
			do base.theta :: me.update_theta(base.theta, 0.2, 0.8, base.q_max, q, r, base.f)
			;bpy
			do base :: me.base_bpy[e_dp].get()
			do base.f :: me.basefunc(bpy, \main@HEIGHT $ float / (basenum $ float - 1.0) * lcount $ float, me.sigma)
			do q :: base.f * base.theta
			do base.theta :: me.update_theta(base.theta, 0.2, 0.8, base.q_max, q, r, base.f)
			
			
			do lcount :+ 1
			do me.base_ex[e_dp].next()
			do me.base_ey[e_dp].next()
			do me.base_px[e_dp].next()
			do me.base_py[e_dp].next()
			do me.base_bex[e_dp].next()
			do me.base_bey[e_dp].next()
			do me.base_bpx[e_dp].next()
			do me.base_bpy[e_dp].next()
		end while
		
		if(q_max = 0.0 | lib@rnd(1, 10) = 1)
			do move :: lib@rnd(0, 7)
			do shoot :: lib@rnd(0, 1)
		end if
		
		if(r <> 0.0)
			;	do dbg@print("px:\{p.x},r:\{r}\n")
		end if
		ret[move, shoot]
	end func
	
	+func update_theta(theta: float, a: float, gamma: float, q_max: float, q: float, r: float, f: float): float
		ret theta + a * (r + gamma * q_max - q) * f
	end func
	
	+func basefunc(x: float, mu: float, sigma: float): float
		ret lib@e ^ (-(x - mu) ^ 2.0 / (2.0 * sigma ^ 2.0)) * 1.0
	end func
	
	+func get_reward(e: \agent@Agent, p: \agent@Agent, bex: float, bey: float, bpx: float, bpy: float): float
		var reward: float :: 0.0
		var v: float :: 15.0 * 3.0
		
		if((p.x + p.width / 2.0 - bex).abs() < p.width / 2.0 + 25.0 + v & (p.y + p.height / 2.0 - bey).abs() < p.height / 2.0 + 25.0 + v)
			do reward :+ 55.5
		end if
		if(((e.x + e.width / 2.0 - bpx).abs() < e.width / 2.0 + 25.0 + v & (e.y + e.height / 2.0 - bpy).abs() < e.height / 2.0 + 25.0 + v))
			do reward :+ -77.7
		end if
		
		ret reward
		
	end func
	
	+func next_pos(move: int, x: float, y: float): []float
		var x_next: float
		var y_next: float
		var v: float :: 15.0
		switch(move)
		case 0
			do x_next :: x
			do y_next :: y - v
		case 1
			do x_next :: x + v
			do y_next :: y - v
		case 2
			do x_next :: x + v
			do y_next :: y
		case 3
			do x_next :: x + v
			do y_next :: y + v
		case 4
			do x_next :: x
			do y_next :: y + v
		case 5
			do x_next :: x - v
			do y_next :: y + v
		case 6
			do x_next :: x - v
			do y_next :: y
		case 7
			do x_next :: x - v
			do y_next :: y - v
		case 8
			do x_next :: x
			do y_next :: y
		end switch
		ret[x_next, y_next]
	end func
	
	;座標をマス目に変換
	+func discrete_pos(x: float, y: float): int
		
		var width: float :: \main@WIDTH / basenum $ float
		var height: float :: \main@HEIGHT / basenum $ float
		
		var v: float :: 15.0
		
		if(x < 0.0)
			do x :: 0.0
		end if
		if(x > \main@WIDTH)
			do x :: \main@WIDTH
		end if
		if(y < 0.0)
			do y :: 0.0
		end if
		if(y > \main@HEIGHT)
			do y :: \main@HEIGHT
		end if
		for Y(0, basenum - 1)
			for X(0, basenum - 1)
				if(x >= X $ float * width & x <= (X $ float + 1.0) * width & y >= Y $ float * height & y <= (Y $ float + 1.0) * height)
					ret X + Y * basenum
				end if
			end for
		end for
	end func
	
	+func savefile(traincount: int, count: int, filename: []char, readcount: int)
		var savecount: int
		var savedata: []char :: ""
		if(traincount <= 100)
			do savecount :: 10
		elif(traincount <= 1000)
			do savecount :: 100
		elif(traincount <= 3000)
			do savecount :: 500
		else
			do savecount :: 1000
		end if
		
		if(count % savecount = 0 & count > 0)
			var handle: file@Writer :: file@makeWriter(filename ~ "_\{readcount + count}.txt", false)
			
			for dp(0, basenum ^ 2 - 1)
				
				do me.base_ex[dp].head()
				do me.base_ey[dp].head()
				do me.base_px[dp].head()
				do me.base_py[dp].head()
				do me.base_bex[dp].head()
				do me.base_bey[dp].head()
				do me.base_bpx[dp].head()
				do me.base_bpy[dp].head()
				while(!me.base_ex[dp].term())
					var base: @Base
					;ex
					do base :: me.base_ex[dp].get()
					do savedata :~ "\{base.theta},"
					;ey
					do base :: me.base_ey[dp].get()
					do savedata :~ "\{base.theta},"
					;px
					do base :: me.base_px[dp].get()
					do savedata :~ "\{base.theta},"
					;py
					do base :: me.base_py[dp].get()
					do savedata :~ "\{base.theta},"
					;bex
					do base :: me.base_bex[dp].get()
					do savedata :~ "\{base.theta},"
					;bey
					do base :: me.base_bey[dp].get()
					do savedata :~ "\{base.theta},"
					;bpx
					do base :: me.base_bpx[dp].get()
					do savedata :~ "\{base.theta},"
					;bpy
					do base :: me.base_bpy[dp].get()
					do savedata :~ "\{base.theta},"
					
					do me.base_ex[dp].next()
					do me.base_ey[dp].next()
					do me.base_px[dp].next()
					do me.base_py[dp].next()
					do me.base_bex[dp].next()
					do me.base_bey[dp].next()
					do me.base_bpx[dp].next()
					do me.base_bpy[dp].next()
				end while
				
				do handle.writeStr(savedata)
			end for
			do handle.fin()
			do \learn@resulttxt :~ "保存しました。 t=\{(lib@sysTime() $ float - \main@start_time $ float) / 1000.0 / 60.0}分\n"
			do dbg@print("保存しました\n")
		end if
	end func
	
	+func readfile(filename: []char, traincount: int)
		if(file@exist(filename ~ "_\{traincount}.txt"))
			var handle: file@Reader :: file@makeReader(filename ~ "_\{traincount}.txt")
			do handle.delimiter([',']) {区切り文字の設定}
			
			for dp(0, basenum ^ 2 - 1)
				
				do me.base_ex[dp].head()
				do me.base_ey[dp].head()
				do me.base_px[dp].head()
				do me.base_py[dp].head()
				do me.base_bex[dp].head()
				do me.base_bey[dp].head()
				do me.base_bpx[dp].head()
				do me.base_bpy[dp].head()
				while(!me.base_ex[dp].term())
					var base: @Base
					;ex
					do base :: me.base_ex[dp].get()
					do base.theta :: handle.readFloat()
					;ey
					do base :: me.base_ey[dp].get()
					do base.theta :: handle.readFloat()
					;px
					do base :: me.base_px[dp].get()
					do base.theta :: handle.readFloat()
					;py
					do base :: me.base_py[dp].get()
					do base.theta :: handle.readFloat()
					;bex
					do base :: me.base_bex[dp].get()
					do base.theta :: handle.readFloat()
					;bey
					do base :: me.base_bey[dp].get()
					do base.theta :: handle.readFloat()
					;bpx
					do base :: me.base_bpx[dp].get()
					do base.theta :: handle.readFloat()
					;bpy
					do base :: me.base_bpy[dp].get()
					do base.theta :: handle.readFloat()
					
					do me.base_ex[dp].next()
					do me.base_ey[dp].next()
					do me.base_px[dp].next()
					do me.base_py[dp].next()
					do me.base_bex[dp].next()
					do me.base_bey[dp].next()
					do me.base_bpx[dp].next()
					do me.base_bpy[dp].next()
				end while
			end for
			do handle.fin()
			do dbg@print("ファイル読み込み完了,t=\{(lib@sysTime() $ float - \main@start_time $ float) / 1000.0}秒\n")
			do \learn@resulttxt :~ "ファイル読み込み完了,t=\{(lib@sysTime() $ float - \main@start_time $ float) / 1000.0}秒\n"
		end if
	end func
end class

class Base()
	+var f: float
	+var theta: float
	+var q_max: float
end class
